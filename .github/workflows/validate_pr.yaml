name: Validate and Update Version on PR

on:
  pull_request:
    branches:
      - develop
      - master

permissions:
  contents: write

jobs:
  validate_and_update:
    name: Validate PR and Update Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'

      - name: Validate Changelog Update
        run: |
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q CHANGELOG.md; then
            echo "❌ CHANGELOG.md must be updated in this PR."
            exit 1
          fi

      - name: Analyze Code
        run: flutter analyze

      - name: Check Formatting
        run: dart format --set-exit-if-changed .

      - name: Install Dependencies
        run: flutter pub get

      - name: Run Tests
        run: flutter test

      - name: Clean Up Old References
        run: |
          git remote prune origin
          git fetch --all

      - name: Configure SSH Signing Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SIGNING_KEY }}" > ~/.ssh/commit_signing_key
          chmod 600 ~/.ssh/commit_signing_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/commit_signing_key
          ssh-keygen -y -f ~/.ssh/commit_signing_key > ~/.ssh/commit_signing_key.pub
          git config --global user.name "${{ secrets.BOT_NAME }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git config --global user.signingkey ~/.ssh/commit_signing_key
          git config --global commit.gpgsign true
          git config --global gpg.format ssh

      - name: Increment Version Based on Label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          echo "Current version: $CURRENT_VERSION"

          LABELS_RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels")

          LABELS=$(echo "$LABELS_RESPONSE" | jq -r '.[].name')

          if echo "$LABELS" | grep -q "major"; then
            UPDATED_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$1+=1; $2=0; $3=0}1' OFS=".")
          elif echo "$LABELS" | grep -q "minor"; then
            UPDATED_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$2+=1; $3=0}1' OFS=".")
          elif echo "$LABELS" | grep -q "patch"; then
            UPDATED_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$3+=1}1' OFS=".")
          else
            echo "❌ No version label found. Please add 'major', 'minor', or 'patch'."
            exit 1
          fi

          sed -i "s/^version:.*/version: $UPDATED_VERSION/" pubspec.yaml

          git config user.name "${{ secrets.BOT_NAME }}"
          git config user.email "${{ secrets.BOT_EMAIL }}"
          git add pubspec.yaml
          git commit -S -m "Bump version to $UPDATED_VERSION"
          git config --global init.defaultBranch main
          git checkout -b "${{ github.head_ref }}"
          git push --set-upstream origin "${{ github.head_ref }}"
